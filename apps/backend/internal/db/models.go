// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type OrderStatus string

const (
	OrderStatusNEW       OrderStatus = "NEW"
	OrderStatusPREPARING OrderStatus = "PREPARING"
	OrderStatusREADY     OrderStatus = "READY"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus `json:"OrderStatus"`
	Valid       bool        `json:"valid"` // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type SizeType string

const (
	SizeTypeGRAM  SizeType = "GRAM"
	SizeTypePIECE SizeType = "PIECE"
)

func (e *SizeType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SizeType(s)
	case string:
		*e = SizeType(s)
	default:
		return fmt.Errorf("unsupported scan type for SizeType: %T", src)
	}
	return nil
}

type NullSizeType struct {
	SizeType SizeType `json:"SizeType"`
	Valid    bool     `json:"valid"` // Valid is true if SizeType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSizeType) Scan(value interface{}) error {
	if value == nil {
		ns.SizeType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SizeType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSizeType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SizeType), nil
}

type SpiceLevel string

const (
	SpiceLevelMild     SpiceLevel = "Mild"
	SpiceLevelMedium   SpiceLevel = "Medium"
	SpiceLevelHot      SpiceLevel = "Hot"
	SpiceLevelExtraHot SpiceLevel = "ExtraHot"
)

func (e *SpiceLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SpiceLevel(s)
	case string:
		*e = SpiceLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for SpiceLevel: %T", src)
	}
	return nil
}

type NullSpiceLevel struct {
	SpiceLevel SpiceLevel `json:"SpiceLevel"`
	Valid      bool       `json:"valid"` // Valid is true if SpiceLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSpiceLevel) Scan(value interface{}) error {
	if value == nil {
		ns.SpiceLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SpiceLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSpiceLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SpiceLevel), nil
}

type UserType string

const (
	UserTypeADMIN UserType = "ADMIN"
	UserTypeUSER  UserType = "USER"
)

func (e *UserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserType(s)
	case string:
		*e = UserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserType: %T", src)
	}
	return nil
}

type NullUserType struct {
	UserType UserType `json:"UserType"`
	Valid    bool     `json:"valid"` // Valid is true if UserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserType), nil
}

type Business struct {
	ID                        int32  `json:"id"`
	ContactPersonName         string `json:"contact_person_name"`
	ContactPersonEmail        string `json:"contact_person_email"`
	ContactPersonMobileNumber string `json:"contact_person_mobile_number"`
	CompanyName               string `json:"company_name"`
	Address                   string `json:"address"`
	Pin                       int32  `json:"pin"`
	City                      string `json:"city"`
	State                     string `json:"state"`
	Country                   string `json:"country"`
	BusinessType              string `json:"business_type"`
	Gst                       string `json:"gst"`
	Pan                       string `json:"pan"`
	BankAccountNumber         string `json:"bank_account_number"`
	BankName                  string `json:"bank_name"`
	IfscCode                  string `json:"ifsc_code"`
	AccountType               string `json:"account_type"`
	AccountHolderName         string `json:"account_holder_name"`
}

type Category struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	BusinessID  int32       `json:"business_id"`
}

type Customer struct {
	ID          int32       `json:"id"`
	PhoneNumber string      `json:"phone_number"`
	Name        string      `json:"name"`
	Whatsapp    pgtype.Bool `json:"whatsapp"`
	Email       pgtype.Text `json:"email"`
	Address     pgtype.Text `json:"address"`
	OutletID    int32       `json:"outlet_id"`
	BusinessID  int32       `json:"business_id"`
}

type MenuItem struct {
	ID            int32          `json:"id"`
	CategoryID    int32          `json:"category_id"`
	Name          string         `json:"name"`
	Description   pgtype.Text    `json:"description"`
	Price         pgtype.Numeric `json:"price"`
	IsVegetarian  bool           `json:"is_vegetarian"`
	SpiceLevel    NullSpiceLevel `json:"spice_level"`
	IsAvailable   bool           `json:"is_available"`
	BusinessID    int32          `json:"business_id"`
	IsDeleted     bool           `json:"is_deleted"`
	Code          string         `json:"code"`
	Customizable  bool           `json:"customizable"`
	Image         pgtype.Text    `json:"image"`
	SizeType      SizeType       `json:"size_type"`
	TaxPercentage int32          `json:"tax_percentage"`
	Variation     []byte         `json:"variation"`
}

type Order struct {
	ID          int32            `json:"id"`
	CustomerID  int32            `json:"customer_id"`
	PhoneNumber string           `json:"phone_number"`
	Name        string           `json:"name"`
	Email       pgtype.Text      `json:"email"`
	Address     pgtype.Text      `json:"address"`
	OrderID     string           `json:"order_id"`
	Status      OrderStatus      `json:"status"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	GstAmount   pgtype.Numeric   `json:"gst_amount"`
	TotalAmount pgtype.Numeric   `json:"total_amount"`
	NetAmount   pgtype.Numeric   `json:"net_amount"`
}

type OrderItem struct {
	ID              int32          `json:"id"`
	ItemCode        string         `json:"item_code"`
	ItemDescription string         `json:"item_description"`
	Variation       []byte         `json:"variation"`
	Quantity        int32          `json:"quantity"`
	UnitPrice       pgtype.Numeric `json:"unit_price"`
	NetPrice        pgtype.Numeric `json:"net_price"`
	TaxPrecentage   int32          `json:"tax_precentage"`
	GstAmount       pgtype.Numeric `json:"gst_amount"`
	TotalAmount     pgtype.Numeric `json:"total_amount"`
	OrderID         int32          `json:"order_id"`
}

type Outlet struct {
	ID            int32  `json:"id"`
	OutletName    string `json:"outlet_name"`
	OutletAddress string `json:"outlet_address"`
	OutletPin     int32  `json:"outlet_pin"`
	OutletCity    string `json:"outlet_city"`
	OutletState   string `json:"outlet_state"`
	OutletCountry string `json:"outlet_country"`
	BusinessID    int32  `json:"business_id"`
}

type OutletMenuItem struct {
	ID          int32          `json:"id"`
	MenuItemID  int32          `json:"menu_item_id"`
	OutletID    int32          `json:"outlet_id"`
	Price       pgtype.Numeric `json:"price"`
	IsAvailable bool           `json:"is_available"`
	CreatedBy   int32          `json:"created_by"`
}

type PrismaMigration struct {
	ID                string             `json:"id"`
	Checksum          string             `json:"checksum"`
	FinishedAt        pgtype.Timestamptz `json:"finished_at"`
	MigrationName     string             `json:"migration_name"`
	Logs              pgtype.Text        `json:"logs"`
	RolledBackAt      pgtype.Timestamptz `json:"rolled_back_at"`
	StartedAt         pgtype.Timestamptz `json:"started_at"`
	AppliedStepsCount int32              `json:"applied_steps_count"`
}

type User struct {
	ID           int32       `json:"id"`
	Name         string      `json:"name"`
	Email        string      `json:"email"`
	Password     string      `json:"password"`
	MobileNumber string      `json:"mobile_number"`
	UserType     UserType    `json:"user_type"`
	Username     string      `json:"username"`
	BusinessID   int32       `json:"business_id"`
	OutletID     pgtype.Int4 `json:"outlet_id"`
}

type UserOutlet struct {
	ID         int32  `json:"id"`
	UserID     int32  `json:"user_id"`
	BusinessID string `json:"business_id"`
	OutletID   int32  `json:"outlet_id"`
}

type UserSession struct {
	ID           int32            `json:"id"`
	UserID       int32            `json:"user_id"`
	AccessToken  string           `json:"access_token"`
	RefreshToken string           `json:"refresh_token"`
	ExpireAt     pgtype.Timestamp `json:"expire_at"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
}

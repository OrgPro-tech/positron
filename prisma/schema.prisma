generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  password       String
  mobile_number  String           @unique
  user_type      UserType         @default(ADMIN)
  username       String           @unique
  business_id    Int
  outlet_id      Int?
  user_outlets   UserOutlet[]
  user_session   UserSession?
  Business       Business         @relation(fields: [business_id], references: [id])
  Outlet         Outlet?          @relation(fields: [outlet_id], references: [id])
  OutletMenuItem OutletMenuItem[]

  @@map("users")
}

model UserOutlet {
  id          Int    @id @default(autoincrement())
  user_id     Int
  business_id String
  outlet_id   Int
  user        User   @relation(fields: [user_id], references: [id])

  @@map("user_outlets")
}

model Business {
  id                           Int        @id @default(autoincrement())
  contact_person_name          String
  contact_person_email         String
  contact_person_mobile_number String
  company_name                 String
  address                      String
  pin                          Int
  city                         String
  state                        String
  country                      String
  business_type                String
  gst                          String
  pan                          String
  bank_account_number          String
  bank_name                    String
  ifsc_code                    String
  account_type                 String
  account_holder_name          String
  outlets                      Outlet[]
  users                        User[]
  MenuItem                     MenuItem[]
  Category                     Category[]
  Customer                     Customer[]

  @@map("businesses")
}

model Outlet {
  id             Int              @id @default(autoincrement())
  outlet_name    String
  outlet_address String
  outlet_pin     Int
  outlet_city    String
  outlet_state   String
  outlet_country String
  business_id    Int
  business       Business         @relation(fields: [business_id], references: [id])
  users          User[]
  OutletMenuItem OutletMenuItem[]
  Customer       Customer[]

  @@map("outlets")
}

model UserSession {
  id            Int      @id @default(autoincrement())
  user_id       Int      @unique
  access_token  String
  refresh_token String
  expire_at     DateTime
  created_at    DateTime @default(now())
  user          User     @relation(fields: [user_id], references: [id])

  @@map("user_sessions")
}

enum UserType {
  ADMIN
  USER
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(50)
  description String?
  menu_items  MenuItem[]
  business    Business   @relation(fields: [business_id], references: [id])
  business_id Int

  @@map("categories")
}

model MenuItem {
  id              Int              @id @default(autoincrement())
  category_id     Int
  name            String           @db.VarChar(100)
  description     String?          @db.Text
  price           Decimal          @db.Decimal(10, 2)
  is_vegetarian   Boolean          @default(false)
  spice_level     SpiceLevel?
  is_available    Boolean          @default(true)
  is_deleted      Boolean          @default(false)
  category        Category         @relation(fields: [category_id], references: [id])
  OutletMenuItems OutletMenuItem[]
  business        Business         @relation(fields: [business_id], references: [id])
  business_id     Int
  code            String           @unique
  tax_percentage  Int
  size_type       SizeType
  variation       Json?
  customizable    Boolean
  image           String?

  @@map("menu_items")
}

enum SizeType {
  GRAM
  PIECE
}

enum SpiceLevel {
  Mild
  Medium
  Hot
  ExtraHot
}

model OutletMenuItem {
  id           Int      @id @default(autoincrement())
  menu_item    MenuItem @relation(fields: [menu_item_id], references: [id])
  menu_item_id Int      @unique
  outlet_id    Int
  outlet       Outlet   @relation(fields: [outlet_id], references: [id])
  price        Decimal  @db.Decimal(10, 2)
  is_available Boolean  @default(true)
  created_by   Int
  User         User     @relation(fields: [created_by], references: [id])

  @@map("outlet_menu_items")
}

model Customer {
  id           Int      @id @default(autoincrement())
  phone_number String   @unique
  name         String
  whatsapp     Boolean? @default(false)
  email        String?
  address      String?
  outlet_id    Int
  outlet       Outlet   @relation(fields: [outlet_id], references: [id])
  business     Business @relation(fields: [business_id], references: [id])
  business_id  Int
  Order        Order[]

  @@map("customers")
}

model Order {
  id           Int         @id @default(autoincrement())
  customer_id  Int
  customer     Customer    @relation(fields: [customer_id], references: [id], onUpdate: Cascade, onDelete: Restrict)
  phone_number String
  name         String
  email        String?
  address      String?
  OrderItem    OrderItem[]
  order_id     String      @unique @db.VarChar(21)
  status       OrderStatus @default(NEW)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @default(now()) @updatedAt
  gst_amount   Decimal     @db.Decimal(10, 2)
  total_amount Decimal     @db.Decimal(10, 2)
  net_amount   Decimal     @db.Decimal(10, 2)

  @@map("orders")
}

enum OrderStatus {
  NEW
  PREPARING
  READY
}

model OrderItem {
  id               Int     @id @default(autoincrement())
  item_code        String
  item_description String
  variation        Json?
  quantity         Int
  unit_price       Decimal @db.Decimal(10, 2)
  net_price        Decimal @db.Decimal(10, 2)
  tax_precentage   Int
  gst_amount       Decimal @db.Decimal(10, 2)
  total_amount     Decimal @db.Decimal(10, 2)
  order_id         Int
  order            Order   @relation(fields: [order_id], references: [id])

  @@map("order_items")
}
